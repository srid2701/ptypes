import struct
import numpy as np

from pathlib import Path

from ptypes import PType
from ptypes.consts.sigproc import *


class PTypeSPEC(PType):

    """
    Class to handle `SPEC` files. These files store spectra,
    generated by `SIGPROC` in a binary format. Every `SPEC`
    file usually has a `SIGPROC` style header in it, which
    stores additional information about the spectra. We parse
    this data with an object of the `PTypeHEADER` class.

    This code is borrowed from the `readSpec` function of Ewan
    Barr's `sigprocpy`, with apologies. I have just cleaned up
    the code and modified it to work with the rest of the package.
    """

    def __init__(self, fname):

        """
        Create an instance of `PTypeSPEC`.
        """

        super().__init__(fname)

        self.read()

    def read(self):

        """
        Read a `SPEC` file into an instance of PTypeSPEC.
        """

        # Read in the `SIGPROC` style header.

        header = PTypeHEADER(self.fname)

        with open(str(self.fname), "rb") as infile:

            # Get the size of the header.

            infile.seek(header.hdrsize)

            # Read data from `SPEC` file.
            # Get the `dtype` according
            # to the number of bits.

            self.nbits = header["nbits"]
            self.dtype = NBITStoDTYPE[self.nbits]
            self.data = np.fromfile(infile, dtype=self.dtype)
            self.data = self.data.astype("float32")

        # Set all attributes from header.

        for key, value in header.__dict__.items():
            setattr(self, key, value)
